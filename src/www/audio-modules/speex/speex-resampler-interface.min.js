class SpeexResampler{constructor(a,b,c,d=7){this.channels=a,this.inRate=b,this.outRate=c,this.quality=d,this._inBufferPtr=-1,this._inBufferSize=-1,this._outBufferPtr=-1,this._outBufferSize=-1,this._inLengthPtr=-1,this._outLengthPtr=-1}processChunk(a){if(!speexModule)throw new Error("You need to wait for SpeexResampler.initPromise before calling this method");if(0!=a.constructor.name.indexOf("Int16Array"))throw new Error("Chunk format has to be 'Int16Array'");else a=new Uint8Array(a.buffer);if(0!=a.length%(this.channels*Uint16Array.BYTES_PER_ELEMENT))throw new Error("Chunk length should be a multiple of channels * 2 bytes");if(!this._resamplerPtr){const a=speexModule._malloc(4);this._resamplerPtr=speexModule._speex_resampler_init(this.channels,this.inRate,this.outRate,this.quality,a);const b=speexModule.getValue(a,"i32");if(0!==b)throw new Error(speexModule.AsciiToString(speexModule._speex_resampler_strerror(b)));this._inLengthPtr=speexModule._malloc(Uint32Array.BYTES_PER_ELEMENT),this._outLengthPtr=speexModule._malloc(Uint32Array.BYTES_PER_ELEMENT)}this._inBufferSize<a.length&&(-1!==this._inBufferPtr&&speexModule._free(this._inBufferPtr),this._inBufferPtr=speexModule._malloc(a.length),this._inBufferSize=a.length);const b=Math.ceil(a.length*this.outRate/this.inRate);this._outBufferSize<b&&(-1!==this._outBufferPtr&&speexModule._free(this._outBufferPtr),this._outBufferPtr=speexModule._malloc(b),this._outBufferSize=b),speexModule.setValue(this._inLengthPtr,a.length/this.channels/Uint16Array.BYTES_PER_ELEMENT,"i32"),speexModule.HEAPU8.set(a,this._inBufferPtr),speexModule.setValue(this._outLengthPtr,this._outBufferSize/this.channels/Uint16Array.BYTES_PER_ELEMENT,"i32");const c=speexModule._speex_resampler_process_interleaved_int(this._resamplerPtr,this._inBufferPtr,this._inLengthPtr,this._outBufferPtr,this._outLengthPtr);if(0!==c)throw new Error(speexModule.AsciiToString(speexModule._speex_resampler_strerror(c)));const d=speexModule.getValue(this._outLengthPtr,"i32");return new Int16Array(speexModule.HEAPU8.slice(this._outBufferPtr,this._outBufferPtr+d*this.channels*Uint16Array.BYTES_PER_ELEMENT).buffer)}}
