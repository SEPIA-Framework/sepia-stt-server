//TODO: 'import' not yet supported by FF :-( (Dec 2020)
//import { SampleRateException, SampleSizeException } from './shared/common.js';
//import { RingBuffer } from './shared/ring-buffer.min.js';
//import { SpeexResampler } from './speex/speex-resampler-interface.min.js';
//import { Speex } from './speex/speex-resampler-wasm.js';
class RingBuffer{constructor(a,b,c){this._readIndex=0,this._writeIndex=0,this._framesAvailable=0,this._channelCount=b,this._length=a,this._channelData=[];for(let d=0;d<this._channelCount;++d)this._channelData[d]="Uint16"==c?new Uint16Array(a):"Int16"==c?new Int16Array(a):"Uint8"==c?new Uint8Array(a):"Int8"==c?new Int8Array(a):new Float32Array(a)}get framesAvailable(){return this._framesAvailable}push(a,b){let c=a[0].length,d=b||function(a,b,c){return a[b][c]};for(let e,f=0;f<c;++f){e=(this._writeIndex+f)%this._length;for(let b=0;b<this._channelCount;++b)this._channelData[b][e]=d(a,b,f)}this._writeIndex+=c,this._writeIndex>=this._length&&(this._writeIndex-=this._length),this._framesAvailable+=c,this._framesAvailable>this._length&&(this._framesAvailable=this._length)}pull(a,b){if(0===this._framesAvailable)return;let c=a[0].length,d=this,e=b||function(a,b,c){return a[b][c]};for(let d,f=0;f<c;++f){d=(this._readIndex+f)%this._length;for(let b=0;b<this._channelCount;++b)a[b][f]=e(this._channelData,b,d)}this._readIndex+=c,this._readIndex>=this._length&&(this._readIndex-=this._length),this._framesAvailable-=c,0>this._framesAvailable&&(this._framesAvailable=0)}};
class SpeexResampler{constructor(a,b,c,d=7){this.channels=a,this.inRate=b,this.outRate=c,this.quality=d,this._inBufferPtr=-1,this._inBufferSize=-1,this._outBufferPtr=-1,this._outBufferSize=-1,this._inLengthPtr=-1,this._outLengthPtr=-1}processChunk(a){if(!speexModule)throw new Error("You need to wait for SpeexResampler.initPromise before calling this method");if(0!=a.constructor.name.indexOf("Int16Array"))throw new Error("Chunk format has to be 'Int16Array'");else a=new Uint8Array(a.buffer);if(0!=a.length%(this.channels*Uint16Array.BYTES_PER_ELEMENT))throw new Error("Chunk length should be a multiple of channels * 2 bytes");if(!this._resamplerPtr){const a=speexModule._malloc(4);this._resamplerPtr=speexModule._speex_resampler_init(this.channels,this.inRate,this.outRate,this.quality,a);const b=speexModule.getValue(a,"i32");if(0!==b)throw new Error(speexModule.AsciiToString(speexModule._speex_resampler_strerror(b)));this._inLengthPtr=speexModule._malloc(Uint32Array.BYTES_PER_ELEMENT),this._outLengthPtr=speexModule._malloc(Uint32Array.BYTES_PER_ELEMENT)}this._inBufferSize<a.length&&(-1!==this._inBufferPtr&&speexModule._free(this._inBufferPtr),this._inBufferPtr=speexModule._malloc(a.length),this._inBufferSize=a.length);const b=Math.ceil(a.length*this.outRate/this.inRate);this._outBufferSize<b&&(-1!==this._outBufferPtr&&speexModule._free(this._outBufferPtr),this._outBufferPtr=speexModule._malloc(b),this._outBufferSize=b),speexModule.setValue(this._inLengthPtr,a.length/this.channels/Uint16Array.BYTES_PER_ELEMENT,"i32"),speexModule.HEAPU8.set(a,this._inBufferPtr),speexModule.setValue(this._outLengthPtr,this._outBufferSize/this.channels/Uint16Array.BYTES_PER_ELEMENT,"i32");const c=speexModule._speex_resampler_process_interleaved_int(this._resamplerPtr,this._inBufferPtr,this._inLengthPtr,this._outBufferPtr,this._outLengthPtr);if(0!==c)throw new Error(speexModule.AsciiToString(speexModule._speex_resampler_strerror(c)));const d=speexModule.getValue(this._outLengthPtr,"i32");return new Int16Array(speexModule.HEAPU8.slice(this._outBufferPtr,this._outBufferPtr+d*this.channels*Uint16Array.BYTES_PER_ELEMENT).buffer)}}

var speexModule;

class SpeexResampleProcessor extends AudioWorkletProcessor {
	
	get SampleRateException() {
		return function(message){
			this.message = message;
			this.name = "SampleRateException";
		}
	}
	get SampleSizeException() {
		return function(message){
			this.message = message;
			this.name = "SampleSizeException";
		};
	}
	
	get Speex() {
		return function(){return function(a){function b(a,b,c){c=c||"i8","*"===c.charAt(c.length-1)&&(c="i32"),"i1"===c?Q[a>>0]=b:"i8"===c?Q[a>>0]=b:"i16"===c?S[a>>1]=b:"i32"===c?U[a>>2]=b:"i64"===c?(oa=[b>>>0,(na=b,1<=+ga(na)?0<na?(0|ja(+ia(na/4294967296),4294967295))>>>0:~~+ha((na-+(~~na>>>0))/4294967296)>>>0:0)],U[a>>2]=oa[0],U[a+4>>2]=oa[1]):"float"===c?W[a>>2]=b:"double"===c?X[a>>3]=b:p("invalid type for setValue: "+c)}function c(a,b){switch(b=b||"i8","*"===b.charAt(b.length-1)&&(b="i32"),b){case"i1":return Q[a>>0];case"i8":return Q[a>>0];case"i16":return S[a>>1];case"i32":return U[a>>2];case"i64":return U[a>>2];case"float":return W[a>>2];case"double":return X[a>>3];default:p("invalid type for getValue: "+b);}return null}function d(a){for(var b,c="";;){if(b=R[a++>>0],!b)return c;c+=String.fromCharCode(b)}}function e(a,b){return 0<a%b&&(a+=b-a%b),a}function f(a){P=a,A.HEAP8=Q=new Int8Array(a),A.HEAP16=S=new Int16Array(a),A.HEAP32=U=new Int32Array(a),A.HEAPU8=R=new Uint8Array(a),A.HEAPU16=T=new Uint16Array(a),A.HEAPU32=V=new Uint32Array(a),A.HEAPF32=W=new Float32Array(a),A.HEAPF64=X=new Float64Array(a)}function g(a){for(;0<a.length;){var b=a.shift();if("function"==typeof b){b(A);continue}var c=b.func;"number"==typeof c?void 0===b.arg?A.dynCall_v(c):A.dynCall_vi(c,b.arg):c(void 0===b.arg?null:b.arg)}}function h(){if(A.preRun)for("function"==typeof A.preRun&&(A.preRun=[A.preRun]);A.preRun.length;)l(A.preRun.shift());g(ba)}function i(){fa=!0,g(ca)}function j(){g(da)}function k(){if(A.postRun)for("function"==typeof A.postRun&&(A.postRun=[A.postRun]);A.postRun.length;)m(A.postRun.shift());g(ea)}function l(a){ba.unshift(a)}function m(a){ea.unshift(a)}function n(){ka++,A.monitorRunDependencies&&A.monitorRunDependencies(ka)}function o(){if(ka--,A.monitorRunDependencies&&A.monitorRunDependencies(ka),0==ka&&(null!==la&&(clearInterval(la),la=null),ma)){var a=ma;ma=null,a()}}function p(a){throw A.onAbort&&A.onAbort(a),a+="",K(a),L(a),Z=!0,$=1,a="abort("+a+"). Build with -s ASSERTIONS=1 for more info.",new WebAssembly.RuntimeError(a)}function q(a){return 0===a.indexOf(pa)}function r(a,b,c){R.copyWithin(a,b,b+c)}function s(){return R.length}function t(a){try{return O.grow(a-P.byteLength+65535>>>16),f(O.buffer),1}catch(a){}}function u(a){if("boolean"==typeof I&&I){var b;try{b=Buffer.from(a,"base64")}catch(c){b=new Buffer(a,"base64")}return new Uint8Array(b.buffer,b.byteOffset,b.byteLength)}try{for(var c=qa(a),d=new Uint8Array(c.length),e=0;e<c.length;++e)d[e]=c.charCodeAt(e);return d}catch(a){throw new Error("Converting base64 string to bytes failed.")}}function v(a){return q(a)?u(a.slice(37)):void 0}function w(a){this.name="ExitStatus",this.message="Program terminated with exit("+a+")",this.status=a}function x(a){function b(){Ba||(Ba=!0,A.calledRun=!0,Z||(i(),j(),y(A),A.onRuntimeInitialized&&A.onRuntimeInitialized(),k()))}(a=a||D,!(0<ka))&&(h(),0<ka||(A.setStatus?(A.setStatus("Running..."),setTimeout(function(){setTimeout(function(){A.setStatus("")},1),b()},1)):b()))}a=a||{};var y,z,A="undefined"==typeof a?{}:a;A.ready=new Promise(function(a,b){y=a,z=b});var B,C={};for(B in A)A.hasOwnProperty(B)&&(C[B]=A[B]);var D=[],E="./this.program",F=function(a,b){throw b},G=!1,H=!1,I=!1;G="object"==typeof window,H="function"==typeof importScripts,I="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node;var J;I?(1<process.argv.length&&(E=process.argv[1].replace(/\\/g,"/")),D=process.argv.slice(2),process.on("uncaughtException",function(a){if(!(a instanceof w))throw a}),process.on("unhandledRejection",p),F=function(a){process.exit(a)},A.inspect=function(){return"[Emscripten Module object]"}):(G||H)&&(J=function(a){document.title=a});var K=A.print||console.log.bind(console),L=A.printErr||console.warn.bind(console);for(B in C)C.hasOwnProperty(B)&&(A[B]=C[B]);C=null,A.arguments&&(D=A.arguments),A.thisProgram&&(E=A.thisProgram),A.quit&&(F=A.quit);var M;A.wasmBinary&&(M=A.wasmBinary);var N;A.noExitRuntime&&(N=A.noExitRuntime),"object"!=typeof WebAssembly&&p("no native wasm support detected");var O,P,Q,R,S,T,U,V,W,X,Y=new WebAssembly.Table({initial:6,maximum:6,element:"anyfunc"}),Z=!1,$=0,_=65536,aa=A.INITIAL_MEMORY||20971520;O=A.wasmMemory?A.wasmMemory:new WebAssembly.Memory({initial:aa/_,maximum:2147483648/_}),O&&(P=O.buffer),aa=P.byteLength,f(P),U[6256>>2]=5249296;var ba=[],ca=[],da=[],ea=[],fa=!1,ga=Math.abs,ha=Math.ceil,ia=Math.floor,ja=Math.min,ka=0,la=null,ma=null;A.preloadedImages={},A.preloadedAudios={};var na,oa,pa="data:application/octet-stream;base64,";ca.push({func:function(){ta()}});var qa="function"==typeof atob?atob:function(a){var b,c,d,e,f,g,h,j="",k=0;a=a.replace(/[^A-Za-z0-9\+\/\=]/g,"");do e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(k++)),f="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(k++)),g="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(k++)),h="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(k++)),b=e<<2|f>>4,c=(15&f)<<4|g>>2,d=(3&g)<<6|h,j+=String.fromCharCode(b),64!==g&&(j+=String.fromCharCode(c)),64!==h&&(j+=String.fromCharCode(d));while(k<a.length);return j},ra={a:r,b:function(a){a>>>=0;var b=s(),c=2147483648;if(a>c)return!1;for(var d,f=1;4>=f;f*=2){d=b*(1+.2/f),d=Math.min(d,a+100663296);var g=Math.min(c,e(Math.max(16777216,a,d),65536)),h=t(g);if(h)return!0}return!1},memory:O,table:Y},sa=function(){function a(a){var b=a.exports;A.asm=b,o("wasm-instantiate")}var b={a:ra};if(n("wasm-instantiate"),A.instantiateWasm)try{var c=A.instantiateWasm(b,a);return c}catch(a){return L("Module.instantiateWasm callback failed with error: "+a),!1}return function(a){var c=v("data:application/octet-stream;base64,");return WebAssembly.instantiate(c,b).then(a,function(a){L("failed to asynchronously prepare wasm: "+a),p(a)})}(function(b){a(b.instance)}),{}}(),ta=A.___wasm_call_ctors=function(){return(ta=A.___wasm_call_ctors=A.asm.c).apply(null,arguments)},ua=A._speex_resampler_init=function(){return(ua=A._speex_resampler_init=A.asm.d).apply(null,arguments)},va=A._free=function(){return(va=A._free=A.asm.e).apply(null,arguments)},wa=A._speex_resampler_destroy=function(){return(wa=A._speex_resampler_destroy=A.asm.f).apply(null,arguments)},xa=A._speex_resampler_process_interleaved_int=function(){return(xa=A._speex_resampler_process_interleaved_int=A.asm.g).apply(null,arguments)},ya=A._speex_resampler_get_rate=function(){return(ya=A._speex_resampler_get_rate=A.asm.h).apply(null,arguments)},za=A._speex_resampler_strerror=function(){return(za=A._speex_resampler_strerror=A.asm.i).apply(null,arguments)},Aa=A._malloc=function(){return(Aa=A._malloc=A.asm.j).apply(null,arguments)};A.setValue=b,A.getValue=c,A.AsciiToString=d;var Ba;if(ma=function a(){Ba||x(),Ba||(ma=a)},A.run=x,A.preInit)for("function"==typeof A.preInit&&(A.preInit=[A.preInit]);0<A.preInit.length;)A.preInit.pop()();return N=!0,x(),a.ready}}();
	}
	get SpeexResampler() {
		return function(cc, is, os, q){return new SpeexResampler(cc, is, os, q);}
	}
	
	get emitterRms() {
		if (this.calculateRmsVolume){
			let rms = Math.sqrt(this._emitterSqrSum / this._emitterSamples);
			this._emitterSqrSum = 0;
			this._emitterSamples = 0;
			return rms;
		}else{
			return 0;
		}
	}
  
	constructor(options) {
		super();
		
		let that = this;
		this.moduleId = "speex-resample-switch-" + Math.round(Math.random() * 1000000) + "-" + Date.now();
		this.doDebug = options.processorOptions.doDebug || false;
		this.isReadyForProcessing = false;
		this.EXPECTED_SAMPLE_SIZE = 128;	//currently 128, but might change in future ... and even become variable! (I hope not)

		this.sourceSamplerate = options.processorOptions.ctxInfo.sampleRate;	//INFO: should be same as global scope 'sampleRate'

		this.targetSampleRate = options.processorOptions.targetSampleRate || options.processorOptions.ctxInfo.targetSampleRate || 16000;
		this.resampleQuality = (options.processorOptions.resampleQuality != undefined)? options.processorOptions.resampleQuality : 7;	//number from 1 to 10, 1 is fast but of bad quality, 10 is slow but best quality (less noise/aliasing, a higher complexity and a higher latency)
		this.emitterBufferSize = options.processorOptions.bufferSize || 512;	//TODO: there is probably a mismatch (we should pull go back to the idea of making the buffer bigger but pull less)
		this.channelCount = 1; //options.processorOptions.channels || 1;		//TODO: supports ONLY MONO atm
		this._bytesPerSample = 2;			//for buffer (aka Xint8 Array) length is in bytes (8bit), so *2 to get 16bit length;
		this.resampler;
		
		this.passThroughMode = (options.processorOptions.passThroughMode != undefined)? options.processorOptions.passThroughMode : 1;	//0: nothing, 1: original, 2: 16bit PCM
		this.calculateRmsVolume = (options.processorOptions.calculateRmsVolume != undefined)? options.processorOptions.calculateRmsVolume : true;
		this.gain = options.processorOptions.gain || 1.0;
				
		//resampling - modes 0: no change, -1: downsampling, 1: upsampling
		this.resamplingMode = (this.targetSampleRate < this.sourceSamplerate? -1 : (this.targetSampleRate > this.sourceSamplerate? 1 : 0));
		this.resampleRatio = this.targetSampleRate/this.sourceSamplerate;
		
		function init(){
			var expectedSizeAfterResampling = Math.ceil(that.EXPECTED_SAMPLE_SIZE * that.resampleRatio);
			if (expectedSizeAfterResampling > that.emitterBufferSize){
				//TODO: if we don't use a string this shows up as "Uncaught [object ...]" in worker.onerror ?! :-/
				throw {name: "BufferSizeException", message: ("Output buffer has to be bigger than (resampleRatio*inputSampleSize)! Currently: " + expectedSizeAfterResampling + " > " + that.emitterBufferSize)};
			}
			var ringBufferSize = expectedSizeAfterResampling + that.emitterBufferSize;			//this should be a safe size
			
			//RingBuffers - alloc. space for emitter
			//that._inputRingBuffer = new RingBuffer(that.collectorBufferSize + that.EXPECTED_SAMPLE_SIZE, that.channelCount);
			that._outputRingBuffer = new RingBuffer(ringBufferSize, that.channelCount, "Int16");

			//Input and output (for each channel) - TODO: set size, one for each channel
			//that._newInputBuffer = [new Float32Array(that.collectorBufferSize)];
			that._newInputBuffer = [new Int16Array(that.EXPECTED_SAMPLE_SIZE)];		
			//TODO: for interleaved STEREO we need [new Uint8Array(that.EXPECTED_SAMPLE_SIZE * that.channelCount * that._bytesPerSample)];
				//... or do we?
				//NOTE: we could use DataView instead
				//let buffer = new ArrayBuffer(that.EXPECTED_SAMPLE_SIZE * that.channelCount * that._bytesPerSample);
				//let that._inputDataView = new DataView(buffer);
			that._newOutputBuffer = [new Int16Array(that.emitterBufferSize)];
			
			that._isFirstValidProcess = true;
			//that._lastEmit = 0;
			
			that._emitterSqrSum = 0;
			that._emitterSamples = 0;
			that._hasGain = (that.gain < 1 || that.gain > 1);
		}
		init();
		
		this.floatTo16BitInterleavedPCM = function(inFloat32, outInt16, i){
			//TODO: if not MONO interleave channels - requires: UInt8Array !!! (or does it?)
			/*
			for (let channel = 0; channel < that.channelCount; channel++){
				//pass through original
				output[channel][i] = inFloat32[channel][i];
				//clip and floatTo16BitPCM
				let sampleVal = Math.max(-1, Math.min(1, inFloat32[channel][i])) * 32767.5 - 0.5;
				//assign
				let outputIndex = (i * that.channelCount + channel) * that._bytesPerSample;
				that._newInputBuffer[channel][outputIndex] = sampleVal;
				that._newInputBuffer[channel][outputIndex + 1] = sampleVal >> 8;
			}
			*/
				
			let sampleVal = Math.max(-1, Math.min(1, inFloat32[0][i]));		//we need -1 to 1 - If this is the first processor we could skip clipping
			//that._inputDataView.setInt16(i * 2, sampleVal < 0 ? sampleVal * 0x8000 : sampleVal * 0x7FFF, true);	// 16-bit signed range is -32768 to 32767, littleEndian byte order.
			outInt16[0][i] = sampleVal < 0 ? sampleVal * 0x8000 : sampleVal * 0x7FFF;
		}
		
		function ready(skipResampler){
			if (!skipResampler){
				//use new resampler for every instance - it keeps data from previous calls to improve the resampling
				that.resampler = that.SpeexResampler(
					that.channelCount, that.sourceSamplerate, that.targetSampleRate, that.resampleQuality
				);
			}
			that.isReadyForProcessing = true;
			that.port.postMessage({
				moduleState: 1,
				moduleInfo: {
					moduleId: that.moduleId,
					sourceSamplerate: that.sourceSamplerate,
					targetSampleRate: that.targetSampleRate,
					emitterBufferSize: that.emitterBufferSize,
					calculateRmsVolume: that.calculateRmsVolume,
					channelCount: that.channelCount,
					resamplingMode: that.resamplingMode,
					gain: that.gain,
					passThroughMode: that.passThroughMode
				}
			});
		}
		//start
		function start(options){
			//TODO: anything?
			//NOTE: timing of this signal is not very well defined
		}
		//stop
		function stop(options){
			//NOTE: timing of this signal is not very well defined
			//send out the remaining buffer data here
			if (that._outputRingBuffer.framesAvailable){
				//pull last samples
				var lastSamples = [new Int16Array(that._outputRingBuffer.framesAvailable)];
				that._outputRingBuffer.pull(lastSamples);

				//Send info
				that.port.postMessage({
					rms: that.emitterRms,
					samples: lastSamples,
					sampleRate: that.targetSampleRate,
					channels: that.channelCount,
					type: lastSamples[0].constructor.name,
					isLast: true
				});
			}
		}
		function reset(options){
			//TODO: implement
			init();
		}
		function release(options){
			//destroy
			that._outputRingBuffer = null;
			that._newInputBuffer = null;
			that._newOutputBuffer = null;
			that.resampler = null;
			speexModule = null;
			//notify processor that we can terminate now
			that.port.postMessage({
				moduleState: 9
			});
		}
		
		//on-request resampling
		function resampleRequest(req){
			var samples = req.samples;
			var int16Buffer;
			if (req.isInt16){
				int16Buffer = samples;
			}else{
				var sampleSize = samples[0].length;
				int16Buffer = [new Int16Array(sampleSize)];		//TODO: MONO
				for (let i = 0; i < sampleSize; ++i){
					that.floatTo16BitInterleavedPCM(samples, int16Buffer, i);
				}
			}
			if (that.resamplingMode){
				var processed = that.resampler.processChunk(int16Buffer[0]);
				that.port.postMessage({
					moduleResponse: true,
					resampleResult: {
						//test: int16Buffer,		//DEBUG
						samples: [processed],
						sampleRate: that.targetSampleRate,
						channels: that.channelCount
					}
				});
			}else{
				that.port.postMessage({
					error: "No resampling required. Skipped process!",
					moduleResponse: true,
					resampleResult: {}
				});
			}
		}
		
		//Control messages
		this.port.onmessage = function(e){
			if (e.data.ctrl){
				if (that.doDebug) console.error("SpeexResampleSwitch - Controls", e.data.ctrl);			//DEBUG
				switch (e.data.ctrl.action) {
					//common interface
					case "start":
						start(e.data.ctrl.options);
						break;
					case "stop":
						stop(e.data.ctrl.options);
						break;
					case "reset":
						reset(e.data.ctrl.options);
						break;
					case "release":
					case "close":
						release(e.data.ctrl.options);
						break;
					case "process":
						//customProcess(e.data.ctrl.data);
						break;
					case "handle":
						//handleEvent(e.data.ctrl.data);
						break;
					default:
						console.error("SpeexResampleSwitch - Unknown control message:", e.data);
						break;
				}
			}else if (e.data.resample){
				//custom interface
				resampleRequest(e.data.resample);
			}
        }
		
		function onSpeexLog(msg){
			if (that.doDebug) console.error("SpeexResampleSwitch - SpeexModuleLog -", msg, "-", that.moduleId);			//DEBUG (use postMessage?)
		}
		//function onSpeexError(msg){}		//TODO: we could wrap the 'resampler.processChunk' function in try-catch and log the error here
		
		//prepare
		if (this.resamplingMode){
			if (!speexModule){
				onSpeexLog("Init. Speex WASM module");
				SpeexResampler.initPromise = this.Speex().then(function(s){
					onSpeexLog("Speex WASM module ready");
					speexModule = s;	//NOTE: used inside Speex
					ready(false);
				});
			}else{
				onSpeexLog("Speex WASM moduel already loaded");
				ready(false);
			}
		}else{
			onSpeexLog("Speex WASM module not needed");
			ready(true);
		}
	}

	process(inputs, outputs, parameters) {
		if (!this.isReadyForProcessing){
			console.error("SpeexResampleSwitch - Module wasn't ready for processing! Input was ignored!", "-", this.moduleId);
			return;
		}

		//Use 1st input and output only
		let input = inputs[0];
		let output = outputs[0];

		//NOTE: AudioWorkletProcessor always gets input[0].length frames (typically 128, might change in future)
		if (input.length > 0){
			let inputSampleSize = input[0].length;
			
			if (this._isFirstValidProcess){
				this._isFirstValidProcess = false;
				//check inputSampleSize
				if (inputSampleSize != this.EXPECTED_SAMPLE_SIZE){
					let msg = "Sample size is: " + inputSampleSize + ", expected: " + this.EXPECTED_SAMPLE_SIZE + ". Need code adjustments!";
					console.error("AudioWorkletProcessor sample size exception - Msg.: " + msg);
					throw new this.SampleSizeException(msg);
				}
			}
			
			//transfer input to 16bit signed, interleaved (channels) PCM output - TODO: ONLY MONO so far!
			let sqrSum = 0;
			for (let i = 0; i < inputSampleSize; ++i){
				//gain
				if (this._hasGain) input[0][i] = input[0][i] * this.gain;
				
				//float to 16Bit interleaved PCM
				this.floatTo16BitInterleavedPCM(input, this._newInputBuffer, i);
				
				//pass through
				if (this.passThroughMode == 2){
					output[0][i] = this._newInputBuffer[0][i];	//16Bit PCM
				}else if (this.passThroughMode == 1){
					output[0][i] = input[0][i];					//original (float32)
				}
				
				//calc. sum for RMS
				if (this.calculateRmsVolume){
					this._emitterSqrSum += (input[0][i] ** 2);
				}
			}
			this._emitterSamples += inputSampleSize;
			
			if (this.resamplingMode != 0){
				//let interleaved16bitPcmAudioChunk = new Int16Array(this._inputDataView);
				//let processed = this.resampler.processChunk(interleaved16bitPcmAudioChunk);
				let processed = this.resampler.processChunk(this._newInputBuffer[0]);
				this._outputRingBuffer.push([processed]);				//TODO: is MONO
			}else{
				this._outputRingBuffer.push([this._newInputBuffer[0]]);	//TODO: is MONO
			}
			
			//Process if we have enough frames for the kernel.
			if (this._outputRingBuffer.framesAvailable >= this.emitterBufferSize) {
				//pull samples
				this._outputRingBuffer.pull(this._newOutputBuffer);

				//Send info
				this.port.postMessage({
					rms: this.emitterRms,
					samples: this._newOutputBuffer,
					sampleRate: this.targetSampleRate,
					channels: this.channelCount,
					type: this._newOutputBuffer[0].constructor.name
				});
			}
		}
		return true;
	}
}

registerProcessor('speex-resample-switch', SpeexResampleProcessor);
